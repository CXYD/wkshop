package net.jeeshop.web.controller.manage.system;import net.jeeshop.biz.system.model.SystemSetting;import net.jeeshop.biz.system.model.SystemSettingExample;import net.jeeshop.biz.system.service.SystemSettingService;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.util.Constants;import net.jeeshop.web.controller.manage.ManageBaseController;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import java.util.*;/** * 系统设置 * * @author dylan */@Controller@RequestMapping("/manage/systemSetting/")public class SystemSettingController extends ManageBaseController<SystemSetting, SystemSettingExample> {    private static final Logger logger = LoggerFactory.getLogger(SystemSetting.class);    @Autowired    private SystemSettingService systemSettingService;//    @Autowired//    private FrontCache frontCache;    SystemSettingController() {        super.page_toList = null;// not support        super.page_toAdd = null;// not support        super.page_toEdit = "/manage/system/systemSettingEdit";    }//	private String sync;//是否立即同步的标志    @Override    public SystemSettingService getService() {        return systemSettingService;    }    @Override    public String toEdit(Long id, ModelMap modelMap) {        SystemSetting e = getService().selectUniqueByExample(new SystemSettingExample());        beforeToEdit(e, modelMap);        modelMap.addAttribute("e", e);        return page_toEdit;    }    /**     * 保存系统设置信息，始终应该只有一条数据才对     */    @RequestMapping(value = "insertOrUpdate", method = RequestMethod.POST)    public String insertOrUpdate(SystemSetting e, ModelMap model, RedirectAttributes flushAttrs) throws Exception {        synchronized (this) {//			e.setBelieveLoginConfig(e.getBelieveLoginInfo().getJsonStr());            if (e.getIsOpen() == null) {                e.setIsOpen(true);            }            if (e.getId() == null) {                e.setImages(getImagesPath(null, e));                //新增                insert(e, flushAttrs);            } else {                SystemSetting ss = systemSettingService.selectById(e.getId());                if (ss == null) {                    throw new NullPointerException("根据ID" + e.getId() + "，查询不到系统环境！");                }                e.setImages(getImagesPath(ss.getImages(), e));                //修改                super.update(e, flushAttrs);            }            logger.info("更新内存缓存数据.");            //同步到内存//            frontCache.loadAllCache();//			if(StringUtils.isNotBlank(sync) && Boolean.valueOf(sync)){//				cacheManager.loadAllCache();//			}        }        addMessage(flushAttrs, "更新成功!");        return "redirect:toEdit";    }    @Override    protected void beforeToEdit(SystemSetting e, ModelMap modelMap) {        List<String> imageList = new ArrayList<String>();        //分解图集，以便页面显示        if (StringUtils.isNotBlank(e.getImages())) {            String[] imageArr = e.getImages().split(ManageContainer.product_images_spider);            for (int i = 0; i < imageArr.length; i++) {                imageList.add(imageArr[i]);            }        }        modelMap.addAttribute("imageList", imageList);    }    /**     * 例如：http://127.0.0.1:8082/myshop/upload/1.jpg;http://127.0.0.1:8082/myshop/upload/2.jpg;     * 获取产品图片路径，注意，这个应该都是相对路径，因为图片有可能会放到专门的图片服务器上。     *     * @return     */    private String getImagesPath(String appendImgs, SystemSetting e) {        logger.debug("e.images = " + e.getImages());        Set<String> imagesSet = new HashSet<String>();        //添加库里面查询出的图片        if (StringUtils.isNotBlank(appendImgs)) {            String[] images2 = appendImgs.split(ManageContainer.product_images_spider);            for (int i = 0; i < images2.length; i++) {                if (StringUtils.isNotBlank(images2[i])) {                    imagesSet.add(images2[i].trim());                }            }        }        //添加页面上传的图片        String[] images = e.getImages().split(ManageContainer.product_images_spider);        for (int i = 0; i < images.length; i++) {            if (StringUtils.isNotBlank(images[i])) {                imagesSet.add(images[i].trim());            }        }        //图片转为逗号分割形式        StringBuilder buff = new StringBuilder();        for (Iterator<String> it = imagesSet.iterator(); it.hasNext(); ) {            buff.append(it.next() + ",");        }        String rr = buff.toString();        if (rr.length() > 0 && rr.endsWith(ManageContainer.product_images_spider)) {            rr = rr.substring(0, rr.length() - 1);        }        return rr;    }    /**     * 根据选择的商品图片名称来删除商品图片     *     * @return     * @throws Exception     */    @RequestMapping(value = "deleteImageByImgPaths", method = RequestMethod.POST)    public String deleteImageByImgPaths(SystemSetting e, String[] imagePaths, ModelMap model) throws Exception {        Long id = e.getId();        if (imagePaths != null & imagePaths.length > 0) {            SystemSetting ee = systemSettingService.selectById(id);            if (StringUtils.isNotBlank(ee.getImages())) {                String[] images = ee.getImages().split(ManageContainer.product_images_spider);                //和该商品的图片集合比对，找出不删除的图片然后保存到库                for (int i = 0; i < imagePaths.length; i++) {                    for (int j = 0; j < images.length; j++) {                        if (imagePaths[i].equals(images[j])) {                            images[j] = null;                            break;                        }                    }                    imagePaths[i] = null;                }                StringBuilder buff = new StringBuilder();                for (int j = 0; j < images.length; j++) {                    if (images[j] != null) {                        buff.append(images[j] + ",");                    }                }                ee.setId(id);                ee.setImages(buff.toString());                if (ee.getImages().equals("")) {                    ee.setImages(ManageContainer.product_images_spider);//全部删除了                }                systemSettingService.update(ee);            }            imagePaths = null;        }        return toEdit(e.getId(), model);    }}